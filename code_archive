# Code snippets that have been phased out but might still be useful in future

def createIndelBedtool(transcripts, operation, maxLen):
    # This function iterates through the transcripts and creates a BedTool object containing each insertion or deletion (depending on whether "I" or "D" is specified in the operation variable).
    # The purpose is to create a data structure that can be intersected with a VCF file of variants.

    o = open("tmp_indel.bed", 'w')
    for tID in transcripts.keys():
        t = transcripts[tID]
        cigarOps,cigarCounts = t.splitCIGAR()
    
        # Check for operation. If none are present, we can skip this transcript
        if operation not in t.CIGAR : continue

        # Start at position in the genome where the transcript starts.
        genomePos = t.POS

        # Iterate over CIGAR operations to find positions of the operations that we care about
        for op,ct in zip(cigarOps, cigarCounts):

            if op == "D":
                if ct <= maxLen and operation == "D":
                    bedChrom = t.CHROM
                    bedStart = genomePos - 1
                    bedEnd = bedStart + ct
                    bedName = tID
                    bedStrand = t.strand
                    o.write("\t".join([bedChrom, str(bedStart), str(bedEnd), bedName, ".", bedStrand]) + "\n")
                genomePos += ct
            if op == "I":
                if ct <= maxLen and operation == "I":
                    bedChrom = t.CHROM
                    bedStart = genomePos - 1
                    bedEnd = bedStart + ct
                    bedName = tID
                    bedStrand = t.strand
                    o.write("\t".join([bedChrom, str(bedStart), str(bedEnd), bedName, ".", bedStrand]) + "\n")
            if op in ["M", "N", "H"]:
                genomePos += ct

    o.close()
    os.system('bedtools sort -i tmp_indel.bed > sorted_tmp_indel.bed')

    return

def intersectWithVariants(transcriptIndels, variants):
    # This function intersects all transcript insertions or deletions with the variant set to look for the closest overlap. It returns a dictionary where each key chrom_start_end points to the extent of overlap.

    result = {}
    intersection = str(transcriptIndels.intersect(variants, wao = True)).split("\n")
    for line in intersection:
        info = line.split()
        if len(info) == 0: continue
        if info[-1] == "0": continue
        
        print line
        chrom = info[0]
        start = str(int(info[1]) + 1) #(convert back to 1-based)
        end = info[2]
        trID = info[3]
        overlap = int(info[-1])
        ID = "_".join([chrom, start, end, trID])

        # Add the ID to the result, along with the amount of overlap. Only keep the match with the largest overlap if there is more than one for a transcript.
        if ID not in result:
            result[ID] = overlap
        else:
            if overlap > result[ID]:
                result[ID] = overlap

    return result 
